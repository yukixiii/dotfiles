# ==========================================================
# commands
# ==========================================================
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
	nmap <Leader>q :<C-u>QuickRun<CR>
'''

[[plugins]]
repo = 'vim-vdebug/vdebug'
on_ft = 'php'
hook_source = '''
	let g:vdebug_options = {
	\    'port' : 9000,
	\    'server' : '',
	\    'timeout' : 20,
	\    'on_close' : 'detach',
	\    'break_on_open' : 1,
	\    'ide_key' : '',
	\    'path_maps' : {
	\         '/var/www/html': '/home/yuki/docker/mnt/eyefile'
	\    },
	\    'continuous_mode' : 1,
	\    'debug_window_level' : 0,
	\    'debug_file_level' : 0,
	\    'debug_file' : '',
	\    'watch_window_style' : 'expanded',
	\    'marker_default' : '⬦',
	\    'marker_closed_tree' : '▸',
	\    'marker_open_tree' : '▾'
	\}
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew', 'MemoList', 'MemoGrep']
hook_source = 'source ~/.config/nvim/rc/memolist.rc.vim'
hook_add = '''
	nnoremap <Leader>mn  :<C-u>MemoNew<CR>
	nnoremap <Leader>ml  :<C-u>MemoList<CR>
	nnoremap <Leader>mg  :<C-u>MemoGrep<CR>
'''

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = ['PrevimOpen']
depends = 'open-browser.vim'
hook_add = '''
	nmap <Leader>p :<C-u>PrevimOpen<CR>
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = ['Qfreplace']


# ==========================================================
# interface
# ==========================================================
[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
on_source = 'denite.nvim'
hook_source = 'source ~/.config/nvim/rc/unite.rc.vim'
hook_add = '''
	" nmap ,a :<C-u>Unite buffer_tab file file_mru<CR>
	" nmap ,t :<C-u>Unite buffer_tab<CR>
	" nmap ,g :<C-u>UniteWithBufferDir file file/new directory/new<CR>
	" nmap ,j :<C-u>Unite file file/new directory/new<CR>
	" nmap ,b :<C-u>Unite bookmark:default -input=[<CR>
	nmap ,v :<C-u>Unite bookmark:default -input=[ -default-action=vimfiler<CR>
	nmap ,e :<C-u>UniteResume<CR>
	" nmap <Leader>o :<C-u>Unite outline<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source ~/.config/nvim/rc/denite.rc.vim'
hook_add = '''
	" nmap ,a :<C-u>Denite buffer_tab file file_mru<CR>
	nmap ,t :<C-u>Denite buffer<CR>
	nmap ,m :<C-u>Denite file_mru<CR>
	nmap ,r :<C-u>Denite file/rec<CR>
	nmap ,p :<C-u>Denite file/rec/git<CR>
	nmap ,g :<C-u>DeniteBufferDir file file:new<CR>
	nmap ,j :<C-u>Denite file file:new<CR>
	nmap ,h :<C-u>Denite file::`expand('~/')` file:new:`expand('~/')`<CR>
	nmap ,/ :<C-u>Denite line -start-filter<CR>
	nmap ,* :<C-u>DeniteCursorWord line<CR>
	" nmap ,n/ :<C-u>Denite line -no-quit<CR>
	nmap ,w :<C-u>Denite -resume<CR>
	nmap <Leader>gr :<C-u>Denite grep<CR>
	nmap <Leader>o :<C-u>Denite outline<CR>
'''

[plugins.ftplugin]
denite = '''
" Define mappings
nnoremap <silent><buffer><expr> <CR>
			\ denite#do_map('do_action')
nnoremap <silent><buffer><expr> a
			\ denite#do_map('choose_action')
nnoremap <silent><buffer><expr> d
			\ denite#do_map('do_action', 'delete')
nnoremap <silent><buffer><expr> p
			\ denite#do_map('do_action', 'preview')
nnoremap <silent><buffer><expr> u
			\ denite#do_map('move_up_path')
nnoremap <silent><buffer><expr> v
			\ denite#do_map('do_action', 'vsplit')
nnoremap <silent><buffer><expr> s
			\ denite#do_map('do_action', 'split')
nnoremap <silent><buffer><expr> t
			\ denite#do_map('do_action', 'tabopen')
nnoremap <silent><buffer><expr> c
			\ denite#do_map('do_action', 'cd')
nnoremap <silent><buffer><expr> q
			\ denite#do_map('quit')
nnoremap <silent><buffer><expr> <Esc>
			\ denite#do_map('quit')
nnoremap <silent><buffer><expr> '
			\ denite#do_map('quick_move')
nnoremap <silent><buffer><expr> i
			\ denite#do_map('open_filter_buffer')
nnoremap <silent><buffer><expr> <Space>
			\ denite#do_map('toggle_select').'j'
'''

[[plugins]]
repo = 'kmnk/denite-dirmark'
depends = 'denite.nvim'
on_source = 'denite.nvim'
hook_add = '''
	nmap ,b :<C-u>Denite dirmark<CR>
'''


# ==========================================================
# utilities
# ==========================================================
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_source = ['unite.vim', 'vimshell.vim', 'vimfiler.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_source = '''
let g:context_filetype#filetypes = {
	\ 'smarty': [
	\   {
	\    'start':
	\     '<script\%( [^>]*\)\? type="text/javascript"\%( [^>]*\)\?>',
	\    'end': '</script>', 'filetype': 'javascript',
	\   },
	\   {
	\    'start':
	\     '<script\%( [^>]*\)\? type="text/coffeescript"\%( [^>]*\)\?>',
	\    'end': '</script>', 'filetype': 'coffee',
	\   },
	\   {
	\    'start':
	\     '<script\%( [^>]*\)\?>',
	\    'end': '</script>', 'filetype': 'javascript',
	\   },
	\   {
	\    'start':
	\     '<style\%( [^>]*\)\?>',
	\    'end': '</style>', 'filetype': 'css',
	\   },
	\   {
	\    'start':
	\     '<[^>]\+ style=\([''"]\)',
	\    'end': '\1', 'filetype': 'css',
	\   },
	\ ],
	\ 'blade': [
	\   {
	\    'start':
	\     '<script\%( [^>]*\)\? type="text/javascript"\%( [^>]*\)\?>',
	\    'end': '</script>', 'filetype': 'javascript',
	\   },
	\   {
	\    'start':
	\     '<script\%( [^>]*\)\? type="text/coffeescript"\%( [^>]*\)\?>',
	\    'end': '</script>', 'filetype': 'coffee',
	\   },
	\   {
	\    'start':
	\     '<script\%( [^>]*\)\?>',
	\    'end': '</script>', 'filetype': 'javascript',
	\   },
	\   {
	\    'start':
	\     '<style\%( [^>]*\)\?>',
	\    'end': '</style>', 'filetype': 'css',
	\   },
	\   {
	\    'start':
	\     '<[^>]\+ style=\([''"]\)',
	\    'end': '\1', 'filetype': 'css',
	\   },
	\ ],
\}
" let g:context_filetype#same_filetypes = {
"	\ 'blade': 'html',
"	\ 'smarty': 'html',
"\}
'''

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = '''
let g:fruzzy#usenative = 0
let g:fruzzy#sortonempty = 0
'''
hook_post_update = 'call fruzzy#install()'

# [[plugins]]
# repo = 'tpope/vim-dispatch'


# ==========================================================
# filer
# ==========================================================
[[plugins]]
repo = 'francoiscabrol/ranger.vim'
depends = 'bclose.vim'
on_map = {n = '<Plug>'}
hook_source = '''
	let g:ranger_map_keys = 0
'''
hook_add = '''
	" nmap ,f :<C-u>RangerWorkingDirectory<CR>
	" nmap ,d :<C-u>Ranger<CR>
'''

[[plugins]]
repo = 'rbgrouleff/bclose.vim'
on_source = 'ranger.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
	nnoremap <silent> ,f :<C-u>Defx<CR>
	nnoremap <silent> ,d :<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
'''
hook_source = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
	" Define mappings
	nnoremap <silent><buffer><expr> <CR>
				\ defx#do_action('open')
	nnoremap <silent><buffer><expr> c
				\ defx#do_action('copy')
	nnoremap <silent><buffer><expr> m
				\ defx#do_action('move')
	nnoremap <silent><buffer><expr> p
				\ defx#do_action('paste')
	nnoremap <silent><buffer><expr> l
				\ defx#do_action('open')
	nnoremap <silent><buffer><expr> E
				\ defx#do_action('open', 'vsplit')
	nnoremap <silent><buffer><expr> P
				\ defx#do_action('open', 'pedit')
	nnoremap <silent><buffer><expr> o
				\ defx#do_action('open_or_close_tree')
	nnoremap <silent><buffer><expr> K
				\ defx#do_action('new_directory')
	nnoremap <silent><buffer><expr> N
				\ defx#do_action('new_file')
	nnoremap <silent><buffer><expr> M
				\ defx#do_action('new_multiple_files')
	nnoremap <silent><buffer><expr> C
				\ defx#do_action('toggle_columns',
				\                'mark:filename:type:size:time')
	nnoremap <silent><buffer><expr> S
				\ defx#do_action('toggle_sort', 'time')
	nnoremap <silent><buffer><expr> d
				\ defx#do_action('remove')
	nnoremap <silent><buffer><expr> r
				\ defx#do_action('rename')
	nnoremap <silent><buffer><expr> !
				\ defx#do_action('execute_command')
	nnoremap <silent><buffer><expr> x
				\ defx#do_action('execute_system')
	nnoremap <silent><buffer><expr> yy
				\ defx#do_action('yank_path')
	nnoremap <silent><buffer><expr> .
				\ defx#do_action('toggle_ignored_files')
	nnoremap <silent><buffer><expr> ;
				\ defx#do_action('repeat')
	nnoremap <silent><buffer><expr> h
				\ defx#do_action('cd', ['..'])
	nnoremap <silent><buffer><expr> ~
				\ defx#do_action('cd')
	nnoremap <silent><buffer><expr> q
				\ defx#do_action('quit')
	nnoremap <silent><buffer><expr> <Space>
				\ defx#do_action('toggle_select') . 'j'
	nnoremap <silent><buffer><expr> *
				\ defx#do_action('toggle_select_all')
	nnoremap <silent><buffer><expr> j
				\ line('.') == line('$') ? 'gg' : 'j'
	nnoremap <silent><buffer><expr> k
				\ line('.') == 1 ? 'G' : 'k'
	nnoremap <silent><buffer><expr> <C-l>
				\ defx#do_action('redraw')
	nnoremap <silent><buffer><expr> <C-g>
				\ defx#do_action('print')
	nnoremap <silent><buffer><expr> cd
				\ defx#do_action('change_vim_cwd')
endfunction
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
on_map = {n = '<Plug>'}
on_if = "isdirectory(bufname('%'))"
hook_source = 'source ~/.config/nvim/rc/vimfiler.rc.vim'
hook_add = '''
	" nmap ,f :<C-u>VimFiler<CR>
	" nmap ,d :<C-u>VimFilerBufferDir<CR>
'''


# ==========================================================
# shell
# ==========================================================
# [[plugins]]
# repo = 'Shougo/deol.nvim'
# on_cmd = 'Deol'
# on_source = 'denite.nvim'
# hook_add = '''
# 	" nmap ,sh :<C-u>Deol<CR>
# '''
# hook_source = '''
# 	" set shell=zsh
# '''

[[plugins]]
repo = 'Shougo/vimshell.vim'
on_source = ['vimfiler.vim']
# on_map = {n = '<Plug>'}


# ==========================================================
# completion
# ==========================================================
# [[plugins]]
# repo = 'zchee/deoplete-jedi'
# on_ft = 'python'

[[plugins]]
repo = 'zchee/deoplete-go'
on_event = 'InsertEnter'
on_ft = 'go'

# [[plugins]]
# repo = 'tweekmonster/deoplete-clang2'
# on_ft = ['c', 'cpp']
# hook_source = '''
# 	let b:clang2_orig_maps = {}
# '''

# [[plugins]]
# repo = 'lvht/phpcd.vim'
# build = 'composer install'
# on_ft = 'php'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
	source ~/.config/nvim/rc/deoplete.rc.vim
	call deoplete#enable()
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
	" snippets
	imap <C-d> <Plug>(neosnippet_expand_or_jump)
	smap <C-d> <Plug>(neosnippet_expand_or_jump)
	xmap <C-d> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neoinclude.vim'

# [[plugins]]
# repo = 'Shougo/neocomplete.vim'
# if = "has('lua')"
# on_event = 'InsertEnter'
# hook_source = '''
# 	let g:neocomplete#enable_at_startup = 1
# 	source ~/.config/nvim/rc/neocomplete.rc.vim
# '''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'Shougo/neco-syntax'
